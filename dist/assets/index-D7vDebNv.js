import { r as c, j as e, a as P } from "./react-BrP7bTIu.js"; import { c as O } from "./react-dom-BtizlmEl.js"; import { u as S, a as R, b as f } from "./react-router-BAmLd01w.js"; import { B as U } from "./react-router-dom-CGKH07-4.js"; import { i as $, g as z, a as K, c as D, s as G, b as F, u as _, d as N, T as Y, e as L, f as V } from "./@firebase-B8PBGgOc.js"; import "./firebase-CtWBaba5.js"; import "./scheduler-CzFDRTuY.js"; import "./@remix-run-6XNHjq0j.js"; import "./idb-BXWtuYvb.js"; (function () { const n = document.createElement("link").relList; if (n && n.supports && n.supports("modulepreload")) return; for (const s of document.querySelectorAll('link[rel="modulepreload"]')) t(s); new MutationObserver(s => { for (const i of s) if (i.type === "childList") for (const l of i.addedNodes) l.tagName === "LINK" && l.rel === "modulepreload" && t(l) }).observe(document, { childList: !0, subtree: !0 }); function a(s) { const i = {}; return s.integrity && (i.integrity = s.integrity), s.referrerPolicy && (i.referrerPolicy = s.referrerPolicy), s.crossOrigin === "use-credentials" ? i.credentials = "include" : s.crossOrigin === "anonymous" ? i.credentials = "omit" : i.credentials = "same-origin", i } function t(s) { if (s.ep) return; s.ep = !0; const i = a(s); fetch(s.href, i) } })(); const g = () => { const [o, n] = c.useState(!1), a = () => { n(s => !s) }, t = e.jsxs("ul", { children: [e.jsx("li", { children: e.jsx("a", { href: "/", children: "Home" }) }), e.jsx("li", { children: e.jsx("a", { href: "/public-board", children: "Public Board" }) }), e.jsx("li", { children: e.jsx("a", { href: "/freedom-board", children: "Note" }) }), e.jsx("li", { children: e.jsx("a", { href: "/about", children: "About" }) })] }); return c.useEffect(() => { const s = () => { window.innerWidth > 768 && n(!1) }; return window.addEventListener("resize", s), () => { window.removeEventListener("resize", s) } }, []), e.jsx("nav", { className: "navigation_area", children: e.jsxs("div", { className: "container", children: [e.jsx("div", { className: "nav_con", children: t }), e.jsxs("div", { className: "hamburger-menu", children: [e.jsx("button", { className: "hamburger-btn", onClick: a, "aria-label": "Toggle Navigation Menu", children: "☰" }), e.jsx("div", { className: `nav_res ${o ? "open" : ""}`, children: t })] })] }) }) }, u = ({ children: o, onClick: n, className: a }) => e.jsx("a", { className: `cust_btn ${a}`, onClick: n, children: o }); function w() { return e.jsx("footer", { children: e.jsx("div", { className: "container", children: e.jsx("div", { className: "footer_info", children: e.jsx("a", { href: "https://freedomboard.netlify.app", children: "© FreedomBoard" }) }) }) }) } function H() { const o = S(), n = () => { console.log("Button clicked! Navigating to Freedom Board..."), o("/freedom-board") }; return e.jsxs("div", { children: [e.jsx(g, {}), e.jsx("div", { id: "slogan_area", children: e.jsxs("div", { className: "container", children: [e.jsx("div", { className: "slogan_video", children: e.jsx("video", { autoPlay: !0, loop: !0, muted: !0, src: "assets/video.mp4" }) }), e.jsxs("div", { className: "slogan_info", children: [e.jsxs("h2", { children: ["Your Space, Your Voice, ", e.jsx("span", { children: "Freedom Board" })] }), e.jsx("p", { children: "An open platform to share your thoughts freely and anonymously." }), e.jsx(u, { onClick: n, children: "Get Started" })] })] }) }), e.jsx(w, {})] }) } const J = { apiKey: "AIzaSyDlyzZB9fH4W2swddDynGTIuMJfhC4VxKg", authDomain: "freedomboard-29042.firebaseapp.com", projectId: "freedomboard-29042", storageBucket: "freedomboard-29042.appspot.com", messagingSenderId: "481646829567", appId: "1:481646829567:web:56874475f9ed64ba61d1ca", measurementId: "G-YVMBK91FS6" }, q = $(J), m = z(q); function X() { const o = S(), [n, a] = c.useState(""), [t, s] = c.useState(0), [i, l] = c.useState(!1); c.useEffect(() => { s(n.length), localStorage.getItem("acceptedTerms") || l(!0) }, [n]); const h = () => { localStorage.setItem("acceptedTerms", "true"), l(!1) }, b = async () => { if (t <= 300) try { const d = await K(D(m, "users"), { text: n, timestamp: G(), time: new Date().toLocaleString() }); console.log("Document written with ID: ", d.id), o("/public-board") } catch (d) { console.error("Error adding document: ", d) } else alert("Character limit exceeded! Please reduce the text to 300 characters or less.") }, C = d => { const y = d.target.value.slice(0, 300); a(y) }; return e.jsxs("div", { children: [e.jsx(g, {}), i && e.jsx("div", { className: "modal-disclaimer", children: e.jsxs("div", { className: "modal-content", children: [e.jsx("h2", { children: "Terms and Agreement" }), e.jsx("p", { children: "By using this platform, you agree to abide by the community guidelines and accept that any inappropriate or offensive content will be removed. Additionally, the content you post may be publicly visible." }), e.jsxs("p", { children: [e.jsx("strong", { children: "Disclaimer:" }), " The platform is not responsible for user-generated content and does not endorse any opinions expressed."] }), e.jsx(u, { onClick: h, children: "I Accept" })] }) }), !i && e.jsx("div", { id: "form_area", children: e.jsx("div", { className: "container", children: e.jsxs("div", { className: "form_holder", children: [e.jsxs("div", { className: "form_info", children: [e.jsx("h2", { children: "What's on your mind?" }), e.jsxs("p", { children: ["Characters written: ", t, "/300"] })] }), e.jsxs("div", { className: "form_floating", children: [e.jsx("textarea", { className: `form-control ${t >= 300 ? "text-danger" : ""}`, placeholder: "Express your thoughts here.", value: n, maxLength: 300, onChange: C }), e.jsx(u, { onClick: b, children: "Post to board" })] })] }) }) }), e.jsx(w, {})] }) } const Z = ({ heading: o, message: n, foot: a, onClick: t }) => e.jsx(e.Fragment, { children: e.jsxs("section", { className: "note_body", onClick: t, children: [e.jsxs("div", { className: "note_content", children: [e.jsx("h2", { children: o }), e.jsx("p", { children: n })] }), e.jsx("div", { className: "note_timestamp", children: e.jsx("p", { children: a }) })] }) }), I = 14 * 24 * 60 * 60 * 1e3, Q = () => { const o = ["Jenna Cole", "Jack Collins", "Nadia Cole", "Theena Muran", "Patio Toya", "Molly Vogue", "Nila Spaghetti", "Benny R. Gyn", "Beth Logins", "Lilly Vogue", "Christiano Bo", "Ma. Kathy", "Augustino Lagaspag", "Sally Xi", "Bethy Bartolome", "Ernie Wan", "Vina Ruruth", "Kung Lee Li Gayaka", "Sophie Ling", "Ma. Ang Heet", "Drink Water", "Dia Rhea", "Felon Knee", "Auntie Sexy", "Fillet Mignon", "Dhrecxzeus", "Sincerely Yours '98", "Dzwyrgh", "Hitler Manila", "Ghrowizard", "Yghngjhyll", "Fort McKinley", "Godis Withus", "Rizalino", "Danilo", "Jejomar", "Covid Bryant", "Coviduvidapdap Dela Cruz"]; return o[Math.floor(Math.random() * o.length)] }, A = o => { const n = new Date(o.seconds * 1e3), t = Math.round((new Date().getTime() - n.getTime()) / 6e4); if (t < 1) return "just now"; if (t === 1) return "1 min ago"; if (t < 60) return `${t} mins ago`; const s = { month: "short", day: "numeric" }; return `posted on ${n.toLocaleDateString("en-US", s)}` }, ee = o => `This note will expire on ${new Date(o.seconds * 1e3 + I).toLocaleDateString("en-US", { month: "short", day: "numeric" })}`, se = () => { const [o, n] = c.useState([]), [a, t] = c.useState(null), [s, i] = c.useState(!1), [l, h] = c.useState(""), b = S(), C = () => b("/freedom-board"), d = r => { t(r), i(!0) }, y = () => { i(!1), t(null) }, k = r => { h(r.target.value) }, B = async () => { const r = D(m, "users"), p = await F(r), W = new Date, T = []; for (const x of p.docs) { const j = x.data(), M = j.timestamp.toDate(); if (W.getTime() - M.getTime() < I) { let v = j.name; v || (v = Q(), await _(N(m, "users", x.id), { name: v })), T.push({ ...j, id: x.id, name: v, timestamp: new Y(Math.floor(M.getTime() / 1e3), 0) }) } else await L(N(m, "users", x.id)) } T.sort((x, j) => j.timestamp.toDate().getTime() - x.timestamp.toDate().getTime()), n(T) }, E = async () => { if (!l.trim() || !a) return; const r = N(m, "users", a.id), p = { text: l.trim(), timestamp: new Date }; await _(r, { comments: V(p) }), await B(), h(""), window.location.reload() }; return c.useEffect(() => { B() }, []), e.jsxs(e.Fragment, { children: [e.jsx(g, {}), e.jsx("div", { id: "note_area", children: e.jsx("div", { className: "container", children: e.jsxs("div", { className: "note_area_holder", children: [e.jsx("div", { className: "create_note", children: e.jsx(u, { onClick: C, children: "Create Note" }) }), e.jsx("div", { className: "note_flex", children: o.length === 0 ? e.jsx("p", { className: "no-notes-message", children: "You're the only one here, let's put some notes, shall we?" }) : o.map(r => e.jsx(Z, { onClick: () => d(r), heading: `Anonymous "${r.name}" Wrote:`, message: e.jsx("p", { children: r.text }), foot: `${(r.comments || []).length} comment${(r.comments || []).length !== 1 ? "s" : ""}  ${A(r.timestamp)} ${ee(r.timestamp)}` }, r.id)) })] }) }) }), s && a && e.jsx("div", { className: "modal-overlay", onClick: y, children: e.jsxs("div", { className: "modal-content", onClick: r => r.stopPropagation(), children: [e.jsx("h3", { children: `Anonymous "${a.name}" Wrote:` }), e.jsx("p", { children: a.text }), e.jsxs("div", { className: "comments", children: [e.jsx("h4", { children: "Comments" }), e.jsx("ul", { children: (a.comments || []).map((r, p) => e.jsxs("li", { children: [e.jsx("p", { children: r.text }), e.jsx("small", { children: A(r.timestamp) })] }, p)) }), e.jsxs("div", { className: "add-comment", children: [e.jsx("input", { type: "text", value: l, onChange: k, placeholder: "Add a comment..." }), e.jsx(u, { onClick: E, children: "Post" })] })] }), e.jsx(u, { onClick: y, children: "Close" })] }) }), e.jsx(w, {})] }) }, te = () => { const [o, n] = c.useState([]); c.useEffect(() => { (async () => { const s = D(m, "users"), l = (await F(s)).docs.map(h => ({ id: h.id, data: h.data() })); n(l) })() }, []); const a = async t => { try { await L(N(m, "users", t)), n(o.filter(s => s.id !== t)), console.log("Document with ID: ", t, " deleted successfully.") } catch (s) { console.error("Error deleting document: ", s) } }; return e.jsxs(e.Fragment, { children: [e.jsx(g, {}), e.jsx("h2", { className: "card-title fs-6", children: "User List" }), o.map(t => e.jsx("div", { className: "container mt-3", children: e.jsxs("div", { className: "card bg p-0 w-auto", children: [e.jsxs("div", { className: "card-body bg-warning", children: [e.jsx("h2", { className: "card-title fs-6", children: "User List" }), e.jsx("p", { className: "fs-4", children: t.data.text }), e.jsx(u, { onClick: () => a(t.id), children: "Delete" })] }), e.jsx("div", { className: "card-footer bg-warning" })] }) }, t.id))] }) }; function ne() { return e.jsxs(e.Fragment, { children: [e.jsx(g, {}), e.jsx("header", { children: e.jsx("div", { className: "container", children: e.jsx("div", { className: "header_holder", children: e.jsxs("div", { className: "headline", children: [e.jsx("h2", { children: "Your Space to Share Freely, Without Boundaries" }), e.jsx("p", { children: "Freedom Board lets you express your thoughts anonymously, effortlessly, and for free." })] }) }) }) }), e.jsx("section", { className: "mission", children: e.jsxs("div", { className: "container", children: [e.jsx("h3", { children: "Our Mission" }), e.jsx("p", { children: "At Freedom Board, our mission is simple: provide a free, open space where anyone can express their thoughts without fear of judgment, boundaries, or identity. Whether you have an idea to share, a story to tell, or a thought to release, Freedom Board is here for you." })] }) }), e.jsx("section", { className: "our_story", children: e.jsxs("div", { className: "container", children: [e.jsx("h3", { children: "Our Story" }), e.jsx("p", { children: "Freedom Board was created with a single goal: to give people the freedom to share their thoughts anonymously and without restrictions. It’s a space where words flow freely, without the constraints of profiles, followers, or algorithms." }), e.jsx("p", { children: "This platform was designed and developed with a vision for simplicity and freedom in online expression. It serves as a refuge for unfiltered and authentic thought-sharing, allowing users to share without constraints." })] }) }), e.jsx("section", { className: "features", children: e.jsxs("div", { className: "container", children: [e.jsx("h3", { children: "What We Offer" }), e.jsxs("ul", { children: [e.jsx("li", { children: "A completely free platform with no sign-ups or fees." }), e.jsx("li", { children: "A simple and intuitive interface for posting thoughts." }), e.jsx("li", { children: "Guaranteed anonymity—your voice, your terms." }), e.jsx("li", { children: "No algorithms, no distractions—just pure expression." })] })] }) }), e.jsx("section", { className: "creator", children: e.jsxs("div", { className: "container", children: [e.jsx("h3", { children: "About the Creator" }), e.jsx("p", { children: "This platform was built by a dedicated developer with a passion for creating simple and accessible digital spaces. The goal is to empower users with privacy and a focus on authentic, anonymous expression." })] }) }), e.jsx("section", { className: "cta", children: e.jsxs("div", { className: "container", children: [e.jsx("h3", { children: "Set Your Thoughts Free" }), e.jsx("p", { children: "Post anonymously, express without limits, and leave your mark." }), e.jsx("a", { href: "/note", className: "cta-button", children: "Start Posting Now" })] }) }), e.jsx(w, {})] }) } function oe() { return e.jsx(U, { children: e.jsxs(R, { children: [e.jsx(f, { path: "/", element: e.jsx(H, {}) }), e.jsx(f, { path: "/freedom-board", element: e.jsx(X, {}) }), e.jsx(f, { path: "/public-board", element: e.jsx(se, {}) }), e.jsx(f, { path: "/about", element: e.jsx(ne, {}) }), e.jsx(f, { path: "/TTTTTTTTT", element: e.jsx(te, {}) })] }) }) } O.createRoot(document.getElementById("root")).render(e.jsx(P.StrictMode, { children: e.jsx(oe, {}) }));
